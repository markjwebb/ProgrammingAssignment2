install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
swirl()  # Runs swirl
5+7
x <- 5 + 7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt -< sqrt(z-1)
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) +  c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
5 + 7
x <- 5 + 7
x
y <-  x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) +  c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq = seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
play()
my_seq
nxt()
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- mum_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
x(my_char, "Mark")
c(my_char, "Mark")
my_name <- c(my_char, "Mark")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste( 1:3, c("X",
| "Y", "Z"), sep = "")
paste( 1:3, c("X","Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)] 4
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <-  c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
> class(myVector)
[1] "matrix"
myMatrix <- myVector
?matrix
?matrix
myMatrix2 <- matrix( data = 1:20, nrow = 4, ncol = 5 )
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
?cbind
cbind(patients, myMatrix)
myData <- data.frame(patients,myMatrix)
myData
class(myData)
cnames <- c( "patient", "age", "weight", "bp", "rating", "test" )
colnames(myData) <- cnames
myData
q()
load(url("http://bit.ly/dasi_gss_data"))
no_nas = gss[!is.na(gss$attend) & !is.na(gss.age)]
no_nas = gss[!is.na(gss$attend) & !is.na(gss$age)]
no_nas = gss[!is.na(gss$attend) & !is.na(gss$age)]
summary(gss$age)
summary(gss$attend)
my_gss = gss[ "attend" & "age"]
my_gss = gss[ "attend", "age"]
names(my_gss)
?subset
my_gss = subset(gss, select = c(attend,age))
names(my_gss)
?complete.cases
table(my_gss)
table(droplevels(my_gss))
my_gss = droplevels(subset(gss, select = c(attend,age)))
my_gss <- droplevels(subset(gss, select = c(attend,age)))
my_gss <- within(my_gss, attend<-factor(attend, levels(attend), ordered=TRUE))
is.ordered(my_gss$attend)
is.ordered(my_gss$age)
my_by = by(my_gss$age ~ my_gss$attend, median)
my_by = by(my_gss$attend ~ my_gss$age, median)
?by
my_by = by(my_gss$age ~ my_gss$attend, function(x) median(x))
my_by = by(my_gss$attend ~ my_gss$age, function(x) median(x))
by(my_gss$attend ~ my_gss$age)
by(my_gss$age ~ my_gss$attend)
summary(my_gss)
head(my_gss)
summary(complete.cases(my_gss)
)
my_gss <- my_gss[complete.cases(my_gss)]
?complete.cases
summary(my_gss)
my_gss <- my_gss[!is.na(my_gss$attend) & !is.na(my_gss$age)]
names(my_gss_
names(my_gss)
95/(95+890+15)
library(datasets)
data(iris)
?iris
summary(iris$Sepal.Length)
sapply(iris, function(x) colMeans(x[, c( "virginica")]))
sapply(iris, function(x) colMeans(x[, c( "Sepal.Length")]))
sapply(iris, function(x) colMeans(x[, c( "Sepal.Length")]))
s <- split(iris,iris$Species)
s
lapply(s, function(x) colMeans(x[, c( "Sepal.Length")]))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, mean
)
lapply(s$Sepal.Length,mean)
s
tapply(iris[iris$Species,iris$Sepal.Length],iris$Species,mean)
iris[iris$Species:iris$Sepal.Length]
apply(s,2,mean)
s
s$virginica
apply(s$virginica,2,mean)
apply(s$virginica,2,mean,na.rm=TRUE)
sapply(s$virginica,function(x) colMeans(x[,c("virginica")],na.rm=TRUE))
sapply(s$virginica,function(x) colMeans(x[,c("Sepal.Length")],na.rm=TRUE))
s$virginica
summary(s$viginica)
summary(s$virginica)
mean(s$virginica)
mean(s$virginica$Sepal.Length)
apply(s$virginica$Sepal.Length,2,mean)
iris
apply(iris,2,mean)
tapply(iris,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
names(iris)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp,mtcars$cyl,mean)
a = tapply(mtcars$hp,mtcars$cyl,mean)
a$4 = a$8
a$4 - a$8
a = tapply(mtcars$hp,mtcars$cyl,mean)
a$4 - a$8
a["4"]
a["4"] - a["8"]
debug(ls)
ls
n
ls
?debug
undebug(ls)
ls
ls
undebug(ls)
ls
traceback()
isdebugged(ls)
ls
pwd
ls
ls .
ls *
ls
pwd
setwd("~/GitHub/ProgrammingAssignment2")
ls
?undebug
undebug(ls)
ls
